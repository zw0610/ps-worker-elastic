diff --git a/Users/zilinzhu/Documents/tensorflow/tensorflow/python/distribute/coordinator/cluster_coordinator.py b/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/tensorflow/python/distribute/coordinator/cluster_coordinator.py
index d788733..40c14af 100644
--- a/Users/zilinzhu/Documents/tensorflow/tensorflow/python/distribute/coordinator/cluster_coordinator.py
+++ b/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/tensorflow/python/distribute/coordinator/cluster_coordinator.py
@@ -747,6 +747,9 @@ class WorkerPreemptionHandler(object):
           # Consider adding backoff retry logic if we see the error logged
           # too frequently.
           logging.error("Cluster update failed with error: %s. Retrying...", e)
+          # Add sleep to prevent constant cluster recovering in fault tolerance.
+          import time
+          time.sleep(5)
 
 
 class Worker(object):
@@ -770,13 +773,29 @@ class Worker(object):
     self._should_worker_thread_run = True
 
     # Worker threads need to start after `Worker`'s initialization.
-    threading.Thread(target=self._process_queue,
+    self._process_thread = threading.Thread(target=self._process_queue,
                      name="WorkerClosureProcessingLoop-%d" % self.worker_index,
-                     daemon=True).start()
+                     daemon=True)
+    self._process_thread.start()
 
   def stop(self):
     """Ensure the worker thread is closed."""
     self._should_worker_thread_run = False
+    self._set_resources_aborted()
+
+  def restart(self):
+    if self._should_worker_thread_run:
+      return
+    # join the thread here the prevent deadlock in queue.get()
+    if self._process_thread is not None:
+      self._process_thread.join()
+    self._should_worker_thread_run = True
+    # Worker threads need to start after `Worker`'s initialization.
+    self._process_thread = threading.Thread(target=self._process_queue,
+                     name="WorkerClosureProcessingLoop-%d" % self.worker_index,
+                     daemon=True)
+    self._process_thread.start()
+    
 
   def _set_resources_aborted(self):
     # TODO(yuefengz): maybe we can query whether a tensor is valid or not
@@ -831,8 +850,11 @@ class Worker(object):
     """Function running in a worker thread to process closure queues."""
     self._maybe_delay()
     while self._should_worker_thread_run:
+      print("worker_index", self.worker_index, flush=True)
       closure = self._cluster._closure_queue.get()  # pylint: disable=protected-access
       if not self._should_worker_thread_run or closure is None:
+        # This was a origin bug
+        self._cluster._closure_queue.put_back(closure)
         return
       self._process_closure(closure)
       # To properly stop the worker and preemption threads, it is important that
